use tavern::Uid;

use crate::{Advantage, Ability, BaseWeapon, DamageType, Proficiency, Resistance, SavingThrow, Skill, Tool};

mod dwarf;

enum Species {
    HighElf,
    HillDwarf,
    Human,
    Tiefling,
}

impl Species {
    pub fn from_string(string) {
        match string {
            "High Elf" => Self::HighElf,
            "Hill Dwarf" => Self::HillDwarf,
            "Human" => Self::Human,
            "Tiefling" => Self::Tiefling,
            _ => panic(`unknown species ${string}`),
        }
    }

    fn name(self) {
        match self {
            Self::HighElf => "High Elf",
            Self::HillDwarf => "Hill Dwarf",
            Self::Human => "Human",
            Self::Tiefling => "Tiefling",
        }
    }

    fn short_name(self) {
        match self {
            Self::HighElf => "Elf",
            Self::HillDwarf => "Dwarf",
            Self::Human => "Human",
            Self::Tiefling => "Tiefling",
        }
    }

    fn ability_score_increases(self) {
        let increases = #{};
        match self {
            Self::HillDwarf => {
                increases[Ability::Constitution.name()] = 2;
                increases[Ability::Wisdom.name()] = 1;
            }
        }
        increases
    }

    fn advantages(self) {
        match self {
            Self::HillDwarf => [Advantage { source: "Dwarven Resistance", against: SavingThrow::Poison }],
        }
    }

    fn features(self) {
        match self {
            Self::HillDwarf => self.dwarf_features(),
            _ => [],
        }
    }

    fn heavy_armor_speed(self) {
        match self {
            Self::HighElf => 20,
            Self::HillDwarf => 25,
            Self::Human => 20,
            Self::Tiefling => 20,
        }
    }

    fn max_hp_modifier(self, character) {
        match self {
            Self::HighElf => 0,
            Self::HillDwarf => character.level(),
            Self::Human => 0,
            Self::Tiefling => 0,
        }
    }

    fn parse_choices(self, parsed, choices) {
        match self {
            Self::HillDwarf => {
                if parsed.contains_key("toolProficiency") {
                    choices["tool_proficiency"] = parsed["toolProficiency"]
                } else {
                    panic("expected a tool proficiency selection as a Hill Dwarf");
                }
            }
        }
    }

    fn proficiencies(self, character) {
        let proficiencies = [];
        match self {
            Self::HillDwarf => {
                proficiencies.extend(
                    [
                        BaseWeapon(Uid::from_string("rrWRGLd8SQpN")),
                        BaseWeapon(Uid::from_string("LZbwW2QST6gv")),
                        BaseWeapon(Uid::from_string("B3BB2bH6RVHv")),
                        BaseWeapon(Uid::from_string("Q7D6ZddlFQx2")),
                    ]
                        .iter()
                        .map(
                            |weapon| Proficiency { source: "Dwarven Combat Training", factor: 1, with: weapon, condition: None },
                        )
                        .collect::<Vec>(),
                );

                let tool_proficiency = character.choices["tool_proficiency"];
                let valid_tools = ["JL52DgCn63Gk", "SXZDTXxSBvCb", "16k0jyNBNyXt"];
                if !valid_tools.iter().find(|value| value == tool_proficiency).is_some() {
                    panic!("invalid tool {tool_proficiency}");
                }
                proficiencies.push(
                    Proficiency {
                        source: "Dwarven Tool Proficiency",
                        factor: 1,
                        with: Tool::Artisan(Uid::from_string(tool_proficiency)),
                        condition: None,
                    },
                );

                proficiencies.push(
                    Proficiency {
                        source: "Stonecunning",
                        factor: 2,
                        with: Skill::History,
                        condition: Some("related to the origin of stonework"),
                    },
                );
            }
        }
        proficiencies
    }

    fn resistances(self) {
        match self {
            Self::HillDwarf => [Resistance { source: "Dwarven Resistance", damage_type: DamageType::Poison }],
        }
    }

    fn speed(self) {
        match self {
            Self::HighElf => 30,
            Self::HillDwarf => 25,
            Self::Human => 30,
            Self::Tiefling => 30,
        }
    }

    fn vision(self) {
        match self {
            Self::HighElf => "Darkvision",
            Self::HillDwarf => "Darkvision",
            Self::Human => "Normal",
            Self::Tiefling => "Darkvision",
        }
    }
}
