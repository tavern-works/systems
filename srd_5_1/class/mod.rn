use crate::Ability;

mod fighter;
mod ranger;
mod rogue;
mod wizard;

enum Class {
    Fighter,
    Ranger,
    Rogue,
    Wizard,
}

impl Class {
    pub fn from_string(string) {
        match string {
            "Fighter" => Class::Fighter,
            "Ranger" => Class::Ranger,
            "Rogue" => Class::Rogue,
            "Wizard" => Class::Wizard,
            _ => panic!("unknown class {string}"),
        }
    }

    fn name(self) {
        match self {
            Class::Fighter => "Fighter",
            Class::Ranger => "Ranger",
            Class::Rogue => "Rogue",
            Class::Wizard => "Wizard",
        }
    }

    fn features(self, character) {
        match self {
            Class::Fighter => fighter::features(),
            Class::Ranger => ranger::features(character),
            Class::Rogue => rogue::features(self, character),
            Class::Wizard => wizard::features(),
        }
    }

    fn hit_die(self) {
        match self {
            Class::Fighter => 10,
            Class::Ranger => 10,
            Class::Rogue => 8,
            Class::Wizard => 6,
        }
    }

    fn parse_choices(self, parsed, choices, level, is_initial) {
        match self {
            Class::Fighter => fighter::parse_choices(self, parsed, choices, level, is_initial),
            Class::Ranger => ranger::parse_choices(self, parsed, choices, level, is_initial),
            Class::Rogue => rogue::parse_choices(self, parsed, choices, level, is_initial),
            Class::Wizard => wizard::parse_choices(self, parsed, choices, level, is_initial),
        }
    }

    fn proficiencies(self, character, is_initial) {
        match self {
            Class::Fighter => fighter::proficiencies(character, is_initial),
            Class::Ranger => ranger::proficiencies(character, is_initial),
            Class::Rogue => rogue::proficiencies(character, is_initial),
            Class::Wizard => wizard::proficiencies(character, is_initial),
        }
    }

    fn resources(self, character) {
        match self {
            Class::Fighter => fighter::resources(),
            Class::Wizard => wizard::resources(character),
            _ => [],
        }
    }

    fn rolls(self, character, resources, tables) {
        match self {
            Class::Fighter => fighter::rolls(resources, tables),
            Class::Rogue => rogue::rolls(character),
            _ => Ok([]),
        }
    }

    fn skills(self) {
        match self {
            Class::Fighter => fighter::skills(),
            Class::Ranger => ranger::skills(),
            Class::Rogue => rogue::skills(),
            Class::Wizard => wizard::skills(),
        }
    }

    fn spell_save_dc(self, character) {
        let ability = match self {
            Class::Wizard => "Intelligence",
            _ => panic!("spell_save_dc not implemented for {}", self.name()),
        };
        let ability_modifier = Ability::modifier_for_value(character.ability_scores()[ability]);
        8 + character.proficiency_bonus() + ability_modifier
    }
}
