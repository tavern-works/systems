use ::tavern::{Alignment, Cell, Column, Columns, Contents, Grid, Header, Page, PrepareOptions, Section, Size, Sort, Table};

const NAME = "Abilities";

pub fn get_page(character) {
    let page = Page::new();
    page.character = character.id();
    page.name = NAME;
    page.icon = "patient_list";
    page.shortcut = "a";
    page
}

pub fn get_layout(name) {
    if name != NAME {
        return Ok(None);
    }

    let layout = [];

    let overview_cells = [
        Cell::try_new(
            0..5,
            0..2,
            Contents::new_text("name")
                .read_only()?
                .label("Character")?
                .align(Alignment::Center)?,
        )?,
        Cell::try_new(5..12, 0..1, Contents::new_text("species").read_only()?.label("Species")?)?,
        Cell::try_new(5..12, 1..2, Contents::new_text("background").read_only()?.label("Background")?)?,

        Cell::try_new(0..2, 2..3, Contents::new_label().label("Class")?.align(Alignment::Right)?)?,
        Cell::try_new(2..11, 2..3, Contents::new_text("class").read_only()?)?,
        Cell::try_new(
            11..12,
            2..3,
            Contents::new_button()
                .key("edit_classes")?
                .icon("edit")?
                .size(Size::Large)?
                .depends_on("unimplemented")?,
        )?,
        Cell::try_new(0..11, 3..4, Contents::new_chip_list("languages").label("Languages")?)?,
        Cell::try_new(
            11..12,
            3..4,
            Contents::new_button().key("edit_languages")?.icon("edit")?.size(Size::Large)?,
        )?,
        Cell::try_new(0..2, 4..5, Contents::new_label().label("Vision")?.align(Alignment::Right)?)?,
        Cell::try_new(2..12, 4..5, Contents::new_text("vision").read_only()?)?,
    ];

    let left_cells = [
        Cell::try_new(
            0..12,
            0..1,
            Contents::new_label()
                .label("Resources")?
                .size(Size::Large)?
                .align(Alignment::Center)?,
        )?,
    ];
    let left = Grid::new(left_cells, false);
    let resource_controls = Columns::new([left, Grid::new([], false)]);
    let resource_headers = [
        Header::new("name", 7, "Name", Sort::None),
        Header::new("regained", 5, "Regained", Sort::None),
    ];
    let resource_columns = [
        Column::new("name", 7, Contents::new_text("name").read_only()?),
        Column::new("regained", 5, Contents::Attributes),
    ];
    let resource_table = Table::new("resources", resource_controls, resource_headers, resource_columns, "order");

    overview_cells.extend(
        [
            Cell::try_new(0..12, 5..11, Contents::Table(resource_table))?,
            Cell::try_new(
                0..12,
                11..12,
                Contents::new_label()
                    .label("Proficiencies")?
                    .size(Size::Large)?
                    .align(Alignment::Center)?,
            )?,
            Cell::try_new(0..12, 12..13, Contents::new_chip_list("tool_proficiencies").label("Tools")?)?,
            Cell::try_new(0..12, 13..14, Contents::new_chip_list("armor_proficiencies").label("Armor")?)?,
            Cell::try_new(0..12, 14..16, Contents::new_chip_list("weapon_proficiencies").label("Weapons")?)?,
        ],
    );
    let overview = Grid::new(overview_cells, false);

    let left_cells = [
        Cell::try_new(
            0..12,
            0..1,
            Contents::new_label()
                .label("Features + Traits")?
                .size(Size::Large)?
                .align(Alignment::Center)?,
        )?,
    ];
    let left = Grid::new(left_cells, false);
    let feature_controls = Columns::new([left, Grid::new([], false)]);
    let feature_headers = [
        Header::new("name", 8, "Name", Sort::None),
        Header::new("source", 4, "Source", Sort::None),
    ];
    let feature_columns = [
        Column::new("name", 8, Contents::new_text("name").read_only()?),
        Column::new(
            "source",
            4,
            Contents::new_text("source")
                .read_only()?
                .size(Size::Small)?
                .align(Alignment::Right)?,
        ),
    ];
    let feature_table = Table::new("features", feature_controls, feature_headers, feature_columns, "order");
    let features = Grid::new([Cell::try_new(0..12, 0..16, Contents::Table(feature_table))?], false);

    layout.push(Section::Columns(Columns::new([overview, features])));
    layout.push(Section::Gap);

    let left_cells = [
        Cell::try_new(0..4, 0..1, Contents::new_label().label("Attacks")?.size(Size::Large)?)?,
    ];
    let left = Grid::new(left_cells, false);
    let right_cells = [Cell::try_new(5..9, 0..1, Contents::new_label().size(Size::Large)?)?];
    let right = Grid::new(right_cells, false);
    let attacks_controls = Columns::new([left, right]);

    let headers = [
        Header::new("name", 10, "Name", Sort::None),
        Header::new("to_hit", 2, "To Hit", Sort::None),
        Header::new("attributes", 12, "Attributes", Sort::None),
    ];

    let columns = [
        Column::new(
            "roll",
            2,
            Contents::new_button().roll(PrepareOptions::by_key("name"))?.label("Roll")?,
        ),
        Column::new("name", 8, Contents::new_text("name").read_only()?),
        Column::new("to_hit", 2, Contents::new_number("to_hit").read_only()?.with_sign()?),
        Column::new("attributes", 12, Contents::Attributes),
    ];

    let table = Table::new("attacks", attacks_controls, headers, columns, "order");
    table.set_draggable(false);

    layout.push(Section::Table(table));

    Ok(Some(layout))
}
