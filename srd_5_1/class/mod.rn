use crate::Skill;

mod fighter;
mod rogue;

enum Class {
    Fighter,
    Ranger,
    Rogue,
    Wizard,
}

impl Class {
    pub fn from_string(string) {
        match string {
            "Fighter" => Class::Fighter,
            "Ranger" => Class::Ranger,
            "Rogue" => Class::Rogue,
            "Wizard" => Class::Wizard,
            _ => panic!("unknown class {string}"),
        }
    }

    fn name(self) {
        match self {
            Class::Fighter => "Fighter",
            Class::Ranger => "Ranger",
            Class::Rogue => "Rogue",
            Class::Wizard => "Wizard",
        }
    }

    fn features(self, character) {
        match self {
            Class::Fighter => self.fighter_features(),
            Class::Rogue => self.rogue_features(character),
            _ => [],
        }
    }

    fn hit_die(self) {
        match self {
            Class::Fighter => 10,
            Class::Ranger => 10,
            Class::Rogue => 8,
            Class::Wizard => 6,
        }
    }

    fn resources(self) {
        match self {
            Class::Fighter => self.fighter_resources(),
            _ => [],
        }
    }

    fn rolls(self, character, resources, tables) {
        match self {
            Class::Fighter => self.fighter_rolls(resources, tables),
            Class::Rogue => self.rogue_rolls(character),
            _ => Ok([]),
        }
    }

    fn skills(self) {
        match self {
            Class::Fighter => [
                Skill::Acrobatics,
                Skill::AnimalHandling,
                Skill::Athletics,
                Skill::History,
                Skill::Insight,
                Skill::Intimidation,
                Skill::Perception,
                Skill::Survival,
            ],
            Class::Rogue => [
                Skill::Acrobatics,
                Skill::Athletics,
                Skill::Deception,
                Skill::Insight,
                Skill::Intimidation,
                Skill::Investigation,
                Skill::Perception,
                Skill::Performance,
                Skill::Persuasion,
                Skill::SleightOfHand,
                Skill::Stealth,
            ],
        }
    }

    fn parse_choices(self, parsed, choices, level, is_initial) {
        match self {
            Class::Fighter => {
                self.parse_fighter_choices(parsed, choices, level, is_initial)
            }
            Class::Rogue => {
                self.parse_rogue_choices(parsed, choices, level, is_initial)
            }
        }
    }

    fn proficiencies(self, character, is_initial) {
        match self {
            Class::Fighter => self.fighter_proficiencies(character, is_initial),
            Class::Rogue => self.rogue_proficiencies(character, is_initial),
        }
    }
}
