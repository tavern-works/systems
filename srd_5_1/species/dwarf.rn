use tavern::Uid;

use crate::{BaseWeapon, Proficiency, Skill, Tool};

pub fn features() {
    Ok([
        #{
            "name": "Ability Score Increase",
            "source": "Hill Dwarf",
            "extras": #{
                "description": "Your Constitution score increases by 2 and your Wisdom score increases by 1.",
            },
        },
        #{
            "name": "Dwarven Toughness",
            "source": "Hill Dwarf",
            "extras": #{
                "description": "Your hit point maximum increases by 1, and it increases by 1 every time you gain a level.",
            },
        },
        #{
            "name": "Speed",
            "source": "Dwarf",
            "extras": #{ "description": "Your speed is not reduced by wearing heavy armor." },
        },
        #{
            "name": "Dwarven Resilience",
            "source": "Dwarf",
            "extras": #{
                "description": "You have advantage on saving throws against poison, and you have resistance against poison damage.",
            },
        },
        #{
            "name": "Stonecunning",
            "source": "Dwarf",
            "extras": #{
                "description": "Whenever you make a History check related to the origin of stonework, you are considered proficient with the History skill and add double your proficiency bonus to the check, instead of your normal proficiency bonus.",
            },
        },
    ])
}

pub fn proficiencies(character) {
    let proficiencies = [];

    proficiencies.extend(
        [
            BaseWeapon(Uid::from_string("rrWRGLd8SQpN")),
            BaseWeapon(Uid::from_string("LZbwW2QST6gv")),
            BaseWeapon(Uid::from_string("B3BB2bH6RVHv")),
            BaseWeapon(Uid::from_string("Q7D6ZddlFQx2")),
        ]
            .iter()
            .map(
                |weapon| Proficiency { source: "Dwarven Combat Training", factor: 1, with: weapon, condition: None },
            )
            .collect::<Vec>(),
    );

    let tool_proficiency = character.choices["tool_proficiency"];
    let valid_tools = ["JL52DgCn63Gk", "SXZDTXxSBvCb", "16k0jyNBNyXt"];
    if !valid_tools.iter().find(|value| value == tool_proficiency).is_some() {
        panic!("invalid tool {tool_proficiency}");
    }
    proficiencies.push(
        Proficiency {
            source: "Dwarven Tool Proficiency",
            factor: 1,
            with: Tool::Artisan(Uid::from_string(tool_proficiency)),
            condition: None,
        },
    );

    proficiencies.push(
        Proficiency {
            source: "Stonecunning",
            factor: 2,
            with: Skill::History,
            condition: Some("related to the origin of stonework"),
        },
    );

    proficiencies
}
