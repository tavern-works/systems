use crate::{Ability, Armor, Proficiency, SavingThrow, Skill, WeaponComplexity};

mod fighter;

enum Class {
    Fighter,
    Ranger,
    Rogue,
    Wizard
}

impl Class {
    pub fn from_string(string) {
        match string {
            "Fighter" => Class::Fighter,
            "Ranger" => Class::Ranger,
            "Rogue" => Class::Rogue,
            "Wizard" => Class::Wizard,
            _ => panic!("unknown class {string}"),
        }
    }

    fn name(self) {
        match self {
            Class::Fighter => "Fighter",
            Class::Ranger => "Ranger",
            Class::Rogue => "Rogue",
            Class::Wizard => "Wizard",
        }
    }

    fn features(self) {
        match self {
            Class::Fighter => self.fighter_features(),
            _ => [],
        }
    }

    fn hit_die(self) {
        match self {
            Class::Fighter => 10,
            Class::Ranger => 10,
            Class::Rogue => 8,
            Class::Wizard => 6,
        }
    }

    fn resources(self) {
        match self {
            Class::Fighter => self.fighter_resources(),
            _ => [],
        }
    }

    fn rolls(self, resources, tables) {
        match self {
            Class::Fighter => self.fighter_rolls(resources, tables),
            _ => Ok([]),
        }
    }

    fn skills(self) {
        match self {
            Class::Fighter => [Skill::Acrobatics, Skill::AnimalHandling, Skill::Athletics, Skill::History, Skill::Insight, Skill::Intimidation, Skill::Perception, Skill::Survival],
        }
    }

    fn parse_choices(self, parsed, choices, level, is_initial) {
        match self {
            Class::Fighter => {
                if is_initial {
                    if !parsed.contains_key("fighterSkills") {
                        panic("couldn't find fighter skills");
                    }
                    let fighter_skills = parsed["fighterSkills"];
                    if fighter_skills is not Vec {
                        panic("expected fighter skills to be an array");
                    }
                    if fighter_skills.len() != 2 {
                        panic!("expected 2 fighter skills, found {}", fighter_skills.len());
                    }
                    if fighter_skills[0] == fighter_skills[1] {
                        panic("expected two different skills")
                    }
                    let fighter_skills = fighter_skills.iter().map(|skill| Skill::from_string(skill)).collect::<Vec>();
                    let valid_skills = self.skills();
                    for skill in fighter_skills {
                        if valid_skills.iter().find(|v| v == skill).is_none() {
                            panic!("skill {} is not a valid fighter skill", skill.name())
                        }
                    }
                    choices["fighter_skills"] = fighter_skills;
                }
            }
        }
    }

    fn proficiencies(self, character, is_initial) {
        let proficiencies = [];
        match self {
            Class::Fighter => {
                if is_initial {
                    proficiencies.push(Proficiency { source: "Fighter", factor: 1, with: Armor::All, condition: None });
                } else {
                    proficiencies.push(Proficiency { source: "Fighter", factor: 1, with: Armor::Light, condition: None });
                    proficiencies.push(Proficiency { source: "Fighter", factor: 1, with: Armor::Medium, condition: None });
                }
                proficiencies.push(Proficiency { source: "Fighter", factor: 1, with: Armor::Shields, condition: None });
                proficiencies.push(Proficiency { source: "Fighter", factor: 1, with: WeaponComplexity::Simple, condition: None });
                proficiencies.push(Proficiency { source: "Fighter", factor: 1, with: WeaponComplexity::Martial, condition: None });
                if is_initial {
                    proficiencies.push(Proficiency { source: "Fighter", factor: 1, with: SavingThrow::Ability(Ability::Strength), condition: None });
                    proficiencies.push(Proficiency { source: "Fighter", factor: 1, with: SavingThrow::Ability(Ability::Constitution), condition: None });
                    for skill in character.choices["fighter_skills"] {
                        proficiencies.push(Proficiency { source: "Fighter", factor: 1, with: skill, condition: None });
                    }
                }
            }
        }
        proficiencies
    }
}
