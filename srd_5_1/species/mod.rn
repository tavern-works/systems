use tavern::{anyhow, bail, Uid};

use crate::{Ability, DamageType, Resistance};

mod dwarf;
mod elf;
mod human;

enum Species {
    HighElf,
    HillDwarf,
    Human,
    Tiefling,
}

impl Species {
    pub fn from_string(string) {
        match string {
            "High Elf" => Self::HighElf,
            "Hill Dwarf" => Self::HillDwarf,
            "Human" => Self::Human,
            "Tiefling" => Self::Tiefling,
            _ => panic(`unknown species ${string}`),
        }
    }

    fn name(self) {
        match self {
            Self::HighElf => "High Elf",
            Self::HillDwarf => "Hill Dwarf",
            Self::Human => "Human",
            Self::Tiefling => "Tiefling",
        }
    }

    fn short_name(self) {
        match self {
            Self::HighElf => "Elf",
            Self::HillDwarf => "Dwarf",
            Self::Human => "Human",
            Self::Tiefling => "Tiefling",
        }
    }

    fn ability_score_increases(self) {
        let increases = #{};
        match self {
            Self::HighElf => {
                increases[Ability::Dexterity.name()] = 2;
                increases[Ability::Intelligence.name()] = 1;
            }
            Self::HillDwarf => {
                increases[Ability::Constitution.name()] = 2;
                increases[Ability::Wisdom.name()] = 1;
            }
            Self::Human => {
                for ability in Ability::all() {
                    increases[ability.name()] = 1;
                }
            }
        }
        increases
    }

    fn features(self, tables, character) {
        match self {
            Self::HighElf => elf::features(tables, character),
            Self::HillDwarf => dwarf::features(),
            Self::Human => human::features(),
            _ => Ok([]),
        }
    }

    fn heavy_armor_speed(self) {
        match self {
            Self::HighElf => 20,
            Self::HillDwarf => 25,
            Self::Human => 20,
            Self::Tiefling => 20,
        }
    }

    fn max_hp_modifier(self, character) {
        match self {
            Self::HighElf => 0,
            Self::HillDwarf => character.level(),
            Self::Human => 0,
            Self::Tiefling => 0,
        }
    }

    fn parse_choices(self, tables, parsed, choices) {
        match self {
            Self::HighElf => {
                if parsed.contains_key("cantrip") {
                    let cantrip = Uid::from_string(parsed["cantrip"]);
                    let item = tables
                        .get_compendium_entry_by_id(cantrip)
                        .ok_or_else(|| anyhow!("couldn't find spell entry for {cantrip:?}"))?;
                    let spell_lists = item.get("spell_lists")?;
                    if !spell_lists.iter().any(|list| list == "Wizard") {
                        bail!("cantrip choice must come from the wizard spell list, found {cantrip:?}");
                    }
                    choices["cantrip"] = cantrip;
                } else {
                    bail!("expected a cantrip selection as a High Elf");
                }
            }
            Self::HillDwarf => {
                if parsed.contains_key("toolProficiency") {
                    choices["tool_proficiency"] = parsed["toolProficiency"]
                } else {
                    bail!("expected a tool proficiency selection as a Hill Dwarf");
                }
            }
        }
        Ok(())
    }

    fn proficiencies(self, character) {
        match self {
            Self::HighElf => elf::proficiencies(),
            Self::HillDwarf => dwarf::proficiencies(character),
            _ => [],
        }
    }

    fn resistances(self) {
        match self {
            Self::HillDwarf => [Resistance { source: "Dwarven Resistance", damage_type: DamageType::Poison }],
        }
    }

    fn speed(self) {
        match self {
            Self::HighElf => 30,
            Self::HillDwarf => 25,
            Self::Human => 30,
            Self::Tiefling => 30,
        }
    }

    fn vision(self) {
        match self {
            Self::HighElf => "Darkvision",
            Self::HillDwarf => "Darkvision",
            Self::Human => "Normal",
            Self::Tiefling => "Darkvision",
        }
    }
}
